name: Deploy

on:
  workflow_run:
    workflows: ["Build"]
    branches: [main]
    types:
      - completed

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  deploy:
    name: Install docker and deploy
    runs-on: ubuntu-latest
    environment: production
#    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    if: false
    steps:
      - name: downcase REPO
        run: |
          echo "IMAGE_NAME=${IMAGE_NAME@L}" >> ${GITHUB_ENV}
      - uses: actions/checkout@v2
      - name: copy file via ssh password
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          port: 22
          source: "docker-compose.yml,docker-compose.prod.yml"
          target: "/var/www"
      - name: Deploy using Docker Compose
        uses: appleboy/ssh-action@v0.1.6
        env:
          ENV_FILE: ${{ vars.ENV_FILE }}
          REGISTRY: ${{ env.REGISTRY }}
          IMAGE_NAME: ${{ env.IMAGE_NAME }}
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          envs: ENV_FILE,REGISTRY,IMAGE_NAME
          script: |
            if [[ $(which docker) == "" ]]; then
              sudo apt-get update
              sudo apt-get install -y apt-transport-https ca-certificates curl software-properties-common
              curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
              sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
              sudo apt-get update
              apt-cache policy docker-ce
              sudo apt-get install -y docker-ce
              sudo apt-get install -y docker-compose-plugin
            fi
            echo "${{ vars.ENV_FILE }}" > /var/www/.env
            mv /var/www/docker-compose.prod.yml /var/www/docker-compose.override.yml
            echo "DOCKER_REGISTRY=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}" >> /var/www/.env
            echo "${{ secrets.DOCKER_PASSWORD }}" | docker login ${{ env.REGISTRY }} --username ${{ secrets.DOCKER_USERNAME }} --password-stdin
            cd /var/www && docker compose pull && docker compose up -d 
            sudo docker image prune -f
